<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head') %>
  <title>Book a Service - HomeConnect</title>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
  <%- include('../partials/navbar', { isLoggedIn: isLoggedIn }) %>

  <div class="container py-5">
    <div class="col-md-10 offset-md-1">
      <div class="card shadow p-4 border-warning" style="border-width: 2px;">
        <h3 class="text-center mb-4 text-primary">Book a Service</h3>

        <% if (typeof flashMessage !== 'undefined' && flashMessage) { %>
          <div class="alert alert-success text-center">
            <%= flashMessage %>
          </div>
        <% } %>

        <% if (formErrors && formErrors.length > 0) { %>
          <div class="alert alert-danger">
            <ul>
              <% formErrors.forEach(function(error) { %>
                <li><%= error.msg %></li>
              <% }); %>
            </ul>
          </div>
        <% } %>

        <form id="bookingForm" action="/bookings/create" method="POST">
          <!-- Step 1: Choose Service & Date -->
          <div class="row mb-4">
            <div class="col-md-6">
              <label for="serviceType" class="form-label fw-bold">Service Type</label>
              <select class="form-select" id="serviceType" required>
                <option value="" selected disabled>Select Service Type</option>
                <option value="Plumbing">Plumbing</option>
                <option value="Electrician">Electrician</option>
                <option value="AC Repair">AC Repair</option>
                <option value="Painting">Painting</option>
                <option value="Carpentry">Carpentry</option>
              </select>
            </div>
            <div class="col-md-6">
              <label for="bookingDate" class="form-label fw-bold">Preferred Date</label>
              <input type="date" class="form-control" id="bookingDate" required>
            </div>
          </div>

          <!-- Step 2: Available Slots -->
          <div id="slotsSection" class="mb-4 d-none">
            <h5 class="text-warning">Available Slots</h5>
            <div id="slotsList" class="list-group"></div>
          </div>

          <!-- üîß Step 3: Hidden Slot ID only -->
          <input type="hidden" name="slotID" id="slotID" required>

          <!-- Submit -->
          <div class="text-center">
            <button type="submit" id="submitBooking" class="btn btn-warning px-5 fw-bold" disabled>Confirm Booking</button>
          </div>
        </form>

      </div>
    </div>
  </div>

  <%- include('../partials/footer') %>

<script>
  const serviceType = document.getElementById('serviceType');
  const bookingDate = document.getElementById('bookingDate');
  const slotsSection = document.getElementById('slotsSection');
  const slotsList = document.getElementById('slotsList');
  const submitBtn = document.getElementById('submitBooking');
  const hiddenSlotID = document.getElementById('slotID');

  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  bookingDate.min = tomorrow.toISOString().split('T')[0];

  function formatTime(rawTime) {
    const [hourStr, min] = rawTime.split(':');
    const hour = parseInt(hourStr, 10);
    const ampm = hour >= 12 ? 'p.m.' : 'a.m.';
    const formattedHour = ((hour + 11) % 12 + 1);
    return `${formattedHour}:${min} ${ampm}`;
  }

  async function fetchTimeSlots() {
    const type = serviceType.value;
    const date = bookingDate.value;

    if (!type || !date) return;

    try {
      const res = await axios.get(`/api/timeslots?serviceType=${type}&date=${date}`);
      const slots = res.data;

      slotsList.innerHTML = '';

      if (slots.length === 0) {
        slotsList.innerHTML = '<p class="text-danger mt-3">No slots available for the selected date.</p>';
        slotsSection.classList.remove('d-none');
        return;
      }

      slots.forEach(slot => {
        const rawStart = slot.SlotStart.slice(11, 16); // "HH:MM"
        const rawEnd = slot.SlotEnd.slice(11, 16);

        const slotStart = formatTime(rawStart);
        const slotEnd = formatTime(rawEnd);

        const item = document.createElement('div');
        item.className = 'list-group-item d-flex justify-content-between align-items-center';

        item.innerHTML = `
          <div>
            <h6 class="mb-1">${slot.FullName} - ${slot.ServiceType}</h6>
            <p class="mb-1 small">${slot.Description}</p>
            <small>‚≠ê ${slot.Rating.toFixed(1)} | ${slot.Experience} yrs | Slot: ${slotStart} - ${slotEnd}</small>
          </div>
          <div>
          <button type="button" class="btn btn-outline-secondary btn-sm mb-1 more-info" data-providerid="${slot.ProviderID}"
            data-bs-toggle="modal" data-bs-target="#providerModal">More Info</button>
            <button type="button" class="btn btn-warning btn-sm select-slot"
              data-slotid="${slot.SlotID}">Select</button>
          </div>
        `;

        slotsList.appendChild(item);
      });

      slotsSection.classList.remove('d-none');
      submitBtn.disabled = true;
    } catch (error) {
      console.error('Error fetching slots:', error);
      slotsList.innerHTML = '<p class="text-danger mt-3">Failed to load slots.</p>';
      slotsSection.classList.remove('d-none');
    }
  }

  serviceType.addEventListener('change', fetchTimeSlots);
  bookingDate.addEventListener('change', fetchTimeSlots);

  slotsList.addEventListener('click', (e) => {
    if (e.target.classList.contains('select-slot')) {
      const slotID = e.target.getAttribute('data-slotid');
      hiddenSlotID.value = slotID;
      submitBtn.disabled = false;

      document.querySelectorAll('.select-slot').forEach(btn => {
        btn.classList.remove('btn-success');
        btn.innerText = 'Select';
      });

      e.target.classList.add('btn-success');
      e.target.innerText = 'Selected';
    }
  });

  document.addEventListener('click', async (e) => {
  if (e.target.classList.contains('more-info')) {
    const providerId = e.target.getAttribute('data-providerid');
    const modalBody = document.getElementById('providerModalBody');

    modalBody.innerHTML = `
      <div class="text-center">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
    `;

    try {
      const res = await axios.get(`/api/providers/${providerId}`);
      const p = res.data;

      modalBody.innerHTML = `
        <h5 class="text-center text-primary">${p.FullName}</h5>
        <p><strong>Service:</strong> ${p.ServiceType}</p>
        <p><strong>Experience:</strong> ${p.Experience} years</p>
        <p><strong>Rating:</strong> ‚≠ê ${p.Rating?.toFixed(1) ?? 'N/A'}</p>
        <p><strong>Bio:</strong> ${p.Description}</p>
      <hr>
      <h6 class="text-secondary">What others are saying:</h6>
      ${
        p.Reviews.length > 0
          ? `<ul class="list-unstyled">
              ${p.Reviews.slice(0, 3).map(review => `
                <li class="mb-2">
                  <div><strong>‚≠ê ${review.Rating}</strong> - ${review.Comment}</div>
                  <div class="text-muted small">${new Date(review.CreatedAt).toLocaleDateString()}</div>
                </li>
              `).join('')}
            </ul>`
          : '<p class="text-muted">No reviews available yet.</p>'
      }
    `;

    } catch (err) {
      console.error('Error fetching provider info:', err);
      modalBody.innerHTML = `<p class="text-danger">Unable to load provider details. Please try again later.</p>`;
    }
  }
});

</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>


<!-- Modal for the More info button -->
<div class="modal fade" id="providerModal" tabindex="-1" aria-labelledby="providerModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header bg-primary text-white">
        <h5 class="modal-title" id="providerModalLabel"> Service Provider Details</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="providerModalBody">
        <div class="text-center">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

</body>
</html>
